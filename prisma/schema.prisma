// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Using SQLite for local development, can be switched to PostgreSQL for production
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // Uncomment for PlanetScale/MySQL
  // provider = "mysql"
  // url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

// Notification types for the app
enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  STORY_VIEW
  REEL_VIEW
  NEW_POST
  NEW_STORY
  NEW_REEL
  SYSTEM
}

// User model for authentication and profiles
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  bio             String?   @default("")
  username        String?   @unique
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  reputationScore Float     @default(0)

  // Relations
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  followers         Follow[]       @relation("FollowingUser")
  following         Follow[]       @relation("FollowerUser")
  messages          Message[]      @relation("SentMessages")
  receivedMessages  Message[]      @relation("ReceivedMessages")
  stories           Story[]
  reels             Reel[]
  notifications     Notification[] @relation("NotificationReceiver")
  sentNotifications Notification[] @relation("NotificationSender")
  groups            GroupMember[]
  reactions         Reaction[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Content models
model Post {
  id            String   @id @default(cuid())
  caption       String?
  contentUrl    String?
  contentType   String // image, video, text, 3d, mixed
  ipfsHash      String? // For decentralized storage
  integrityHash String? // Hash for content verification
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  visibility    String   @default("public") // public, friends, private

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  comments      Comment[]
  tags          Tag[]
  reactions     Reaction[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String

  // Relations
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  reactions     Reaction[]
  notifications Notification[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("FollowerUser", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowingUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

// Messaging features
model Message {
  id               String    @id @default(cuid())
  content          String
  encryptedContent String?
  encryptionKey    String?
  contentType      String    @default("text") // text, image, video, audio
  createdAt        DateTime  @default(now())
  senderId         String
  receiverId       String
  readAt           DateTime?

  // Relations
  sender        User           @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User           @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  reactions     Reaction[]
  notifications Notification[]
  groupId       String?
  group         Group?         @relation(fields: [groupId], references: [id], onDelete: SetNull)
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  GroupMember[]
  messages Message[]
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  role     String   @default("member") // admin, moderator, member
  joinedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

// Stories and Reels (TikTok-like)
model Story {
  id        String   @id @default(cuid())
  mediaUrl  String
  mediaType String // image, video
  duration  Int? // in seconds for video
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  views         StoryView[]
  reactions     Reaction[]
  notifications Notification[]
}

model StoryView {
  id       String   @id @default(cuid())
  storyId  String
  viewerId String
  viewedAt DateTime @default(now())

  // Relations
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, viewerId])
}

model Reel {
  id        String   @id @default(cuid())
  videoUrl  String
  caption   String?
  soundName String?
  createdAt DateTime @default(now())
  userId    String

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions     Reaction[]
  notifications Notification[]
}

// Additional features
model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  content    String
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  receiverId String
  senderId   String?

  // Optional reference IDs for different content types
  postId    String?
  commentId String?
  storyId   String?
  reelId    String?
  messageId String?

  // Relations
  receiver User     @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender   User?    @relation("NotificationSender", fields: [senderId], references: [id])
  post     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  story    Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  reel     Reel?    @relation(fields: [reelId], references: [id], onDelete: Cascade)
  message  Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Reaction {
  id        String   @id @default(cuid())
  type      String // love, laugh, wow, sad, angry, etc.
  createdAt DateTime @default(now())
  userId    String
  postId    String?
  commentId String?
  messageId String?
  storyId   String?
  reelId    String?

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  story   Story?   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  reel    Reel?    @relation(fields: [reelId], references: [id], onDelete: Cascade)
}
